;;This file autogenerated from 
;;
;;  src/cljx/shared/gcj_util/case_reader.cljx
;;
^{:line 1} (ns gcj-util.case-reader ^{:line 2} (:use [gcj-util.misc :only [to-int indexed-values]] [clojure.string :only [split trim-newline]]))
^{:line 5} (defn cases-from-lines [linesPerCase lines] ^{:line 7} (partition linesPerCase lines))
^{:line 9} (defn raw-cases-from-lines [linesPerCase lines] ^{:line 11} (let [expectedCount ^{:line 12} (to-int ^{:line 12} (first lines)) rawCases ^{:line 13} (->> ^{:line 13} (rest lines) ^{:line 14} (cases-from-lines linesPerCase) indexed-values) isCountValid ^{:line 16} (= expectedCount ^{:line 16} (count rawCases))] ^{:line 17} (assert isCountValid) {:count expectedCount, :rawCases rawCases, :isCountValid isCountValid}))
^{:line 22} (defn parse-cases-from-input [parseFunction linesPerCase input] ^{:line 24} (let [lines ^{:line 25} (-> input trim-newline ^{:line 27} (split #"\n")) rawCases ^{:line 28} (raw-cases-from-lines linesPerCase lines)] ^{:line 29} (map parseFunction ^{:line 29} (:rawCases rawCases))))
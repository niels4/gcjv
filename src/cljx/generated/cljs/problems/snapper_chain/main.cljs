;;This file autogenerated from 
;;
;;  src/cljx/shared/problems/snapper_chain/main.cljx
;;
^{:cljs true, :line 1} (ns problems.snapper_chain.main ^{:line 2} (:use [gcj-util.misc :only [to-int indexed-values]] [gcj-util.case-reader :only [parse-cases-from-input]] [gcj-util.case-solver :only [solve-problem]] [clojure.string :only [split join]]))
^{:line 15} (def problemName "snapper_chain")
^{:line 17} (def linesPerCase 1)
^{:line 19} (defn parseCase [{:keys [index value]}] ^{:line 21} (let [[line] value [num-snappers times-snapped] ^{:line 23} (->> ^{:line 23} (split line #"\s") ^{:line 24} (map to-int))] {:caseNumber index, :num-snappers num-snappers, :times-snapped times-snapped}))
^{:line 28} (def caseParser ^{:line 28} (partial parse-cases-from-input parseCase linesPerCase))
^{:line 30} (defn snaps-to-power-light [num-switches] ^{:line 32} (loop [num-switches num-switches snap-count 0] ^{:line 35} (if ^{:line 35} (zero? num-switches) snap-count ^{:line 37} (recur ^{:line 37} (dec num-switches) ^{:line 37} (inc ^{:line 37} (* 2 snap-count))))))
^{:line 39} (defn is-light-on [num-switches num-snaps] ^{:line 41} (let [snaps-to-power ^{:line 42} (snaps-to-power-light num-switches)] ^{:line 43} (loop [last-multiple snaps-to-power] ^{:line 45} (cond ^{:line 45} (= num-snaps last-multiple) true ^{:line 46} (< num-snaps last-multiple) false :else ^{:line 47} (recur ^{:line 47} (+ last-multiple 1 snaps-to-power))))))
^{:line 49} (defn format-state [state] ^{:line 51} (if state "ON" "OFF"))
^{:line 53} (defn processCase [{:keys [caseNumber num-snappers times-snapped]}] ^{:line 55} (let [light-state ^{:line 56} (is-light-on num-snappers times-snapped) result ^{:line 57} (format-state light-state)] {:caseNumber caseNumber, :result result}))
^{:line 61} (defn ^{:export true} solve-for-input [input] ^{:line 63} (str ^{:line 63} (solve-problem caseParser processCase input)))
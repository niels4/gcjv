(load-file (str "src/clj/problems/reverse_words/main.clj"))
(in-ns "problems.reverse-words.main")
(in-ns 'problems.reverse-words.main)
(println problemName)
  problemName
  (solve-for-input "1\nhere are some words man")
(def cases (caseParser  "1\nhere are some words man"))
(pprint cases)
(load-file (str "src/clj/problems/reverse_words/main.clj"))
(in-ns 'problems.reverse-words.main)
  (solve-for-input "1\nhere are some words man")
(def cases (caseParser  "1\nhere are some words man"))
(pprint cases)
(ns problems.reverse-words.main
  (:use [gcj-util.misc :only [to-int indexed-values]]
        [gcj-util.case-reader :only [parse-cases-from-input]]
        [gcj-util.case-solver :only [solve-problem]]
        [clojure.string :only [split join pprint]]))
(load-file (str "src/clj/problems/reverse_words/main.clj"))
(in-ns 'problems.reverse-words.main)
(def cases (caseParser  "1\nhere are some words man"))
(pprint cases)
  (solve-for-input "1\nhere are some words man")
(load-file (str "src/clj/problems/reverse_words/main.clj"))
(in-ns 'problems.reverse-words.main)
(def cases (caseParser (slurp "src/cljx/problems/input/sample.in"))
(pprint cases)
)
(def cases (caseParser (slurp "src/cljx/problems/input/sample.in")))
(pprint cases)
(def cases (caseParser (slurp "src/cljx/problems/reverse_words/input/sample.in")))
(pprint cases)
(def cases (caseParser (slurp "src/cljx/problems/reverse_words/input/large.in")))
(pprint cases)
  (solve-for-input (slurp "src/cljx/problems/reverse_words/input/large.in"))
(load-file (str "src/clj/problems/rev_words/main.clj"))
(in-ns 'problems.rev_words.main)
(load-file (str "src/clj/problems/rev_words/main.clj"))
(in-ns 'problems.rev_words.main)
(load-file (str "src/clj/problems/rwords/main.clj"))
(in-ns 'problems.rwords.main)
(def cases (caseParser (slurp "src/cljx/problems/rwords/input/sample.in")))
(pprint cases)
  (solve-for-input (slurp "src/cljx/problems/rwords/input/large.in"))
(load-file (str "src/clj/problems/rev_words/main.clj"))
(in-ns 'problems.rev_words.main)
(def cases (caseParser (slurp "src/cljx/problems/rev_words/input/sample.in")))
(pprint cases)
(load-file (str "src/clj/problems/rev_words2/main.clj"))
(in-ns 'problems.rev_words2.main)
(def cases (caseParser (slurp "src/cljx/problems/rev_words2/input/sample.in")))
(pprint cases)
(load-file (str "src/clj/problems/rev_words2/main.clj"))
(in-ns 'problems.rev_words2.main)
(def cases (caseParser (slurp "src/cljx/problems/rev_words2/input/sample.in")))
(pprint cases)
(load-file (str "src/clj/problems/rev_words2/main.clj"))
(in-ns 'problems.rev_words2.main)
(def cases (caseParser (slurp "src/cljx/problems/rev_words2/input/sample.in")))
(pprint cases)
(load-file (str "src/clj/problems/rev_words2/main.clj"))
(in-ns 'problems.rev_words2.main)
(def cases (caseParser (slurp "src/cljx/problems/rev_words2/input/sample.in")))
(pprint cases)
(load-file (str "src/clj/problems/rev_words2/main.clj"))
(in-ns 'problems.rev_words2.main)
(def cases (caseParser (slurp "src/cljx/problems/rev_words2/input/sample.in")))
(pprint cases)
  (solve-for-input (slurp "src/cljx/problems/rev_words2/input/large.in"))
  (solve-for-input (slurp "src/cljx/problems/rev_words2/input/sample.in"))
(load-file (str "src/clj/problems/rev_words2/main.clj"))
(in-ns 'problems.rev_words2.main)
(def cases (caseParser (slurp "src/cljx/problems/rev_words2/input/sample.in")))
(pprint cases)
(load-file (str "src/clj/problems/rev_words2/main.clj"))
(in-ns 'problems.rev_words2.main)
(def cases (caseParser (slurp "src/cljx/problems/rev_words2/input/sample.in")))
(pprint cases)
(load-file (str "src/clj/problems/rev_words2/main.clj"))
(load-file (str "src/cljx/generated/clj/problems/rev_words2/main.clj"))
(in-ns 'problems.rev_words2.main)
(def cases (caseParser (slurp "src/cljx/problems/rev_words2/input/sample.in")))
(pprint cases)
(load-file (str "src/cljx/generated/clj/problems/rev_words2/main.clj"))
(in-ns 'problems.rev_words2.main)
(def cases (caseParser (slurp "src/cljx/shared/problems/rev_words2/input/sample.in")))
(pprint cases)
(write-solution solve-for-input "sample")
(write-solution solve-for-input problemName "sample")
(load-file (str "src/cljx/generated/clj/problems/rev_words2/main.clj"))
(in-ns 'problems.rev_words2.main)
(def cases (caseParser (read-input-text problemName "sample")))
(load-file (str "src/cljx/generated/clj/problems/rev_words2/main.clj"))
(in-ns 'problems.rev_words2.main)
(def cases (caseParser (read-input-text problemName "sample")))
(pprint cases)
(load-file (str "src/cljx/generated/clj/problems/rev_words2/main.clj"))
(in-ns 'problems.rev_words2.main)
(def cases (caseParser (read-input-text problemName "sample")))
(pprint cases)
(write-solution solve-for-input problemName "sample")
(load-file (str "src/cljx/generated/clj/problems/rev_words2/main.clj"))
(in-ns 'problems.rev_words2.main)
(def cases (caseParser (read-input-text problemName "sample")))
(pprint cases)
(write-solution solve-for-input problemName "sample")
(load-file (str "src/cljx/generated/clj/problems/rev_words2/main.clj"))
(in-ns 'problems.rev_words2.main)
(def cases (caseParser (read-input-text problemName "sample")))
(pprint cases)
(load-file (str "src/cljx/generated/clj/problems/rev_words2/main.clj"))
(in-ns 'problems.rev_words2.main)
(def cases (caseParser (read-input-text problemName "sample")))
(pprint cases)
(write-solution solve-for-input problemName "sample")
(load-file (str "src/cljx/generated/clj/problems/rev_words2/main.clj"))
(in-ns 'problems.rev_words2.main)
(def cases (caseParser (read-input-text problemName "sample")))
(pprint cases)
(test-expected-output solve-for-input problemName "sample")
(load-file (str "src/cljx/generated/clj/problems/rev_words2/main.clj"))
(in-ns 'problems.rev_words2.main)
(def cases (caseParser (read-input-text problemName "sample")))
(pprint cases)
(test-expected-output solve-for-input problemName "sample")
(def cases (caseParser (read-input-text problemName "small")))
(pprint cases)
(def cases (caseParser (read-input-text problemName "small")))
(pprint cases)
(println (write-solution solve-for-input problemName "small"))
(load-file (str "src/cljx/generated/clj/problems/rev_words2/main.clj"))
(in-ns 'problems.rev_words2.main)
(def cases (caseParser (read-input-text problemName "small")))
(pprint cases)
(println (write-solution solve-for-input problemName "small"))
(load-file (str "src/cljx/generated/clj/problems/reverse_words/main.clj"))
(in-ns 'problems.reverse_words.main)
(def cases (caseParser (read-input-text problemName "sample")))
(pprint cases)
(def cases (caseParser (read-input-text problemName "sample")))
(pprint cases)
(defn parseCase
  [{:keys [index value]}]
  (let
    [[line] value]
    {:caseNumber index
     :words (split line #"\s")}))
(def caseParser (partial parse-cases-from-input parseCase linesPerCase))
(defn processCase
  [{:keys [caseNumber words]}]
  (let
    [result ""]
    {:caseNumber caseNumber
     :result     result}))
(def cases (caseParser (read-input-text problemName "sample")))
(pprint cases)
(test-expected-output solve-for-input problemName "sample")
(defn processCase
  [{:keys [caseNumber words]}]
  (let
    [result words]
    {:caseNumber caseNumber
     :result     result}))
(test-expected-output solve-for-input problemName "sample")
(defn processCase
  [{:keys [caseNumber words]}]
  (let
    [result (->> words
                 reverse
                 )]
    {:caseNumber caseNumber
     :result     result}))
(test-expected-output solve-for-input problemName "sample")
(defn processCase
  [{:keys [caseNumber words]}]
  (let
    [result (->> words
                 reverse
                 (join " "))]
    {:caseNumber caseNumber
     :result     result}))
(test-expected-output solve-for-input problemName "sample")
(load-file (str "src/cljx/generated/clj/problems/reverse_words/main.clj"))
(in-ns 'problems.reverse_words.main)
(def cases (caseParser (read-input-text problemName "sample")))
(pprint cases)
(test-expected-output solve-for-input problemName "sample")
(println (write-solution solve-for-input problemName "small"))
(def largeSolution (write-solution solve-for-input problemName "large"))
(load-file (str "src/cljx/generated/clj/problems/theme_park/main.clj"))
(in-ns 'problems.theme_park.main)
(def cases (caseParser (read-input-text problemName "sample")))
(pprint cases)
(defn parseCase
  [{:keys [index value]}]
  (let
    [[line1 line2] value
      [r k n] (->> (split line1 #"\s")
                      (map to-int))
      groups  (->> (split line2 #"\s")
                   (map to-int)
                   vec)]
    {:caseNumber index
     :times-run r
     :capacity  k
     :num-groups n
     :groups groups}))
(def caseParser (partial parse-cases-from-file parseCase linesPerCase))
(defn parseCase
  [{:keys [index value]}]
  (let
    [[line1 line2] value
      [r k n] (->> (split line1 #"\s")
                      (map to-int))
      groups  (->> (split line2 #"\s")
                   (map to-int)
                   vec)]
    {:caseNumber index
     :times-run r
     :capacity  k
     :num-groups n
     :groups groups}))
(def caseParser (partial parse-cases-from-input parseCase linesPerCase))
(def cases (caseParser (read-input-text problemName "sample")))
(pprint cases)
(load-file (str "src/cljx/generated/clj/problems/theme_park/main.clj"))
(in-ns 'problems.theme_park.main)
(def cases (caseParser (read-input-text problemName "sample")))
(pprint cases)
(test-expected-output solve-for-input problemName "sample")
(println (write-solution solve-for-input problemName "small"))
(def largeSolution (write-solution solve-for-input problemName "large"))
(def cases (caseParser (read-input-text problemName "sample")))
(pprint cases)
(load-file (str "src/cljx/generated/clj/problems/snapper_chain/main.clj"))
(in-ns 'problems.snapper_chain.main)
(def cases (caseParser (read-input-text problemName "sample")))
(pprint cases)
(defn parseCase
  [{:keys [index value]}]
  (let
    [[line] value
     [num-snappers times-snapped] (->> (split line #"\s")
                                   (map to-int))]
    {:caseNumber index
     :num-snappers num-snappers
     :times-snapped times-snapped}))
(def caseParser (partial parse-cases-from-input parseCase linesPerCase))
(def cases (caseParser (read-input-text problemName "sample")))
(pprint cases)
(load-file (str "src/cljx/generated/clj/problems/snapper_chain/main.clj"))
(in-ns 'problems.snapper_chain.main)
(def cases (caseParser (read-input-text problemName "sample")))
(pprint cases)
(test-expected-output solve-for-input problemName "sample")
(load-file (str "src/cljx/generated/clj/problems/snapper_chain/main.clj"))
(in-ns 'problems.snapper_chain.main)
(def cases (caseParser (read-input-text problemName "sample")))
(pprint cases)
(test-expected-output solve-for-input problemName "sample")
(snaps-to-power-light 4)
(inc (* 2 (snaps-to-power-light 4)))
(snaps-to-power-light 1)
(snaps-to-power-light 2)
(snaps-to-power-light 4)
(snaps-to-power-light 3)
(snaps-to-power-light 5)
(load-file (str "src/cljx/generated/clj/problems/snapper_chain/main.clj"))
(in-ns 'problems.snapper_chain.main)
(test-expected-output solve-for-input problemName "sample")
(println (write-solution solve-for-input problemName "small"))
(def largeSolution (write-solution solve-for-input problemName "large"))
(defn is-light-on
  [num-switches num-snaps]
  (let
    [snaps-to-power (snaps-to-power-light num-switches)
     snap-multiple (/ (inc num-snaps) (inc snaps-to-power))]
    (integer? snap-multiple)))
(load-file (str "src/cljx/generated/clj/problems/snapper_chain/main.clj"))
(in-ns 'problems.snapper_chain.main)
(def cases (caseParser (read-input-text problemName "sample")))
(pprint cases)
(test-expected-output solve-for-input problemName "sample")
(println (write-solution solve-for-input problemName "small"))
(def largeSolution (write-solution solve-for-input problemName "large"))
(load-file (str "src/cljx/generated/clj/problems/snapper_chain/main.clj"))
(in-ns 'problems.snapper_chain.main)
(test-expected-output solve-for-input problemName "sample")
(println (write-solution solve-for-input problemName "small"))
(def largeSolution (write-solution solve-for-input problemName "large"))
(load-file (str "src/cljx/generated/clj/problems/snapper_chain/main.clj"))
(in-ns 'problems.snapper_chain.main)
(def cases (caseParser (read-input-text problemName "sample")))
(pprint cases)
(load-file (str "target/cljx_generated/clj/problems/snapper_chain/main.clj"))
(in-ns 'problems.snapper_chain.main)
(def cases (caseParser (read-input-text problemName "sample")))
(pprint cases)
(test-expected-output solve-for-input problemName "sample")
(def largeSolution (write-solution solve-for-input problemName "large"))
(println (write-solution solve-for-input problemName "small"))

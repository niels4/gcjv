(load-file (str "src/clj/problems/reverse_words/main.clj"))
(in-ns "problems.reverse-words.main")
(in-ns 'problems.reverse-words.main)
(println problemName)
  problemName
  (solve-for-input "1\nhere are some words man")
(def cases (caseParser  "1\nhere are some words man"))
(pprint cases)
(load-file (str "src/clj/problems/reverse_words/main.clj"))
(in-ns 'problems.reverse-words.main)
  (solve-for-input "1\nhere are some words man")
(def cases (caseParser  "1\nhere are some words man"))
(pprint cases)
(ns problems.reverse-words.main
  (:use [gcj-util.misc :only [to-int indexed-values]]
        [gcj-util.case-reader :only [parse-cases-from-input]]
        [gcj-util.case-solver :only [solve-problem]]
        [clojure.string :only [split join pprint]]))
(load-file (str "src/clj/problems/reverse_words/main.clj"))
(in-ns 'problems.reverse-words.main)
(def cases (caseParser  "1\nhere are some words man"))
(pprint cases)
  (solve-for-input "1\nhere are some words man")
(load-file (str "src/clj/problems/reverse_words/main.clj"))
(in-ns 'problems.reverse-words.main)
(def cases (caseParser (slurp "src/cljx/problems/input/sample.in"))
(pprint cases)
)
(def cases (caseParser (slurp "src/cljx/problems/input/sample.in")))
(pprint cases)
(def cases (caseParser (slurp "src/cljx/problems/reverse_words/input/sample.in")))
(pprint cases)
(def cases (caseParser (slurp "src/cljx/problems/reverse_words/input/large.in")))
(pprint cases)
  (solve-for-input (slurp "src/cljx/problems/reverse_words/input/large.in"))
(load-file (str "src/clj/problems/rev_words/main.clj"))
(in-ns 'problems.rev_words.main)
(load-file (str "src/clj/problems/rev_words/main.clj"))
(in-ns 'problems.rev_words.main)
(load-file (str "src/clj/problems/rwords/main.clj"))
(in-ns 'problems.rwords.main)
(def cases (caseParser (slurp "src/cljx/problems/rwords/input/sample.in")))
(pprint cases)
  (solve-for-input (slurp "src/cljx/problems/rwords/input/large.in"))
(load-file (str "src/clj/problems/rev_words/main.clj"))
(in-ns 'problems.rev_words.main)
(def cases (caseParser (slurp "src/cljx/problems/rev_words/input/sample.in")))
(pprint cases)
(load-file (str "src/clj/problems/rev_words2/main.clj"))
(in-ns 'problems.rev_words2.main)
(def cases (caseParser (slurp "src/cljx/problems/rev_words2/input/sample.in")))
(pprint cases)
(load-file (str "src/clj/problems/rev_words2/main.clj"))
(in-ns 'problems.rev_words2.main)
(def cases (caseParser (slurp "src/cljx/problems/rev_words2/input/sample.in")))
(pprint cases)
(load-file (str "src/clj/problems/rev_words2/main.clj"))
(in-ns 'problems.rev_words2.main)
(def cases (caseParser (slurp "src/cljx/problems/rev_words2/input/sample.in")))
(pprint cases)
(load-file (str "src/clj/problems/rev_words2/main.clj"))
(in-ns 'problems.rev_words2.main)
(def cases (caseParser (slurp "src/cljx/problems/rev_words2/input/sample.in")))
(pprint cases)
(load-file (str "src/clj/problems/rev_words2/main.clj"))
(in-ns 'problems.rev_words2.main)
(def cases (caseParser (slurp "src/cljx/problems/rev_words2/input/sample.in")))
(pprint cases)
  (solve-for-input (slurp "src/cljx/problems/rev_words2/input/large.in"))
  (solve-for-input (slurp "src/cljx/problems/rev_words2/input/sample.in"))
(load-file (str "src/clj/problems/rev_words2/main.clj"))
(in-ns 'problems.rev_words2.main)
(def cases (caseParser (slurp "src/cljx/problems/rev_words2/input/sample.in")))
(pprint cases)
(load-file (str "src/clj/problems/rev_words2/main.clj"))
(in-ns 'problems.rev_words2.main)
(def cases (caseParser (slurp "src/cljx/problems/rev_words2/input/sample.in")))
(pprint cases)
(load-file (str "src/clj/problems/rev_words2/main.clj"))
(load-file (str "src/cljx/generated/clj/problems/rev_words2/main.clj"))
(in-ns 'problems.rev_words2.main)
(def cases (caseParser (slurp "src/cljx/problems/rev_words2/input/sample.in")))
(pprint cases)
(load-file (str "src/cljx/generated/clj/problems/rev_words2/main.clj"))
(in-ns 'problems.rev_words2.main)
(def cases (caseParser (slurp "src/cljx/shared/problems/rev_words2/input/sample.in")))
(pprint cases)
(write-solution solve-for-input "sample")
(write-solution solve-for-input problemName "sample")
(load-file (str "src/cljx/generated/clj/problems/rev_words2/main.clj"))
(in-ns 'problems.rev_words2.main)
(def cases (caseParser (read-input-text problemName "sample")))
(load-file (str "src/cljx/generated/clj/problems/rev_words2/main.clj"))
(in-ns 'problems.rev_words2.main)
(def cases (caseParser (read-input-text problemName "sample")))
(pprint cases)
(load-file (str "src/cljx/generated/clj/problems/rev_words2/main.clj"))
(in-ns 'problems.rev_words2.main)
(def cases (caseParser (read-input-text problemName "sample")))
(pprint cases)
(write-solution solve-for-input problemName "sample")
(load-file (str "src/cljx/generated/clj/problems/rev_words2/main.clj"))
(in-ns 'problems.rev_words2.main)
(def cases (caseParser (read-input-text problemName "sample")))
(pprint cases)
(write-solution solve-for-input problemName "sample")
(load-file (str "src/cljx/generated/clj/problems/rev_words2/main.clj"))
(in-ns 'problems.rev_words2.main)
(def cases (caseParser (read-input-text problemName "sample")))
(pprint cases)
(load-file (str "src/cljx/generated/clj/problems/rev_words2/main.clj"))
(in-ns 'problems.rev_words2.main)
(def cases (caseParser (read-input-text problemName "sample")))
(pprint cases)
(write-solution solve-for-input problemName "sample")
(load-file (str "src/cljx/generated/clj/problems/rev_words2/main.clj"))
(in-ns 'problems.rev_words2.main)
(def cases (caseParser (read-input-text problemName "sample")))
(pprint cases)
(test-expected-output solve-for-input problemName "sample")
(load-file (str "src/cljx/generated/clj/problems/rev_words2/main.clj"))
(in-ns 'problems.rev_words2.main)
(def cases (caseParser (read-input-text problemName "sample")))
(pprint cases)
(test-expected-output solve-for-input problemName "sample")

<?xml version="1.0"?>
<project name="gcj-viewer" default="webapp">
  <description>
    Build File for minifying/compiling the clojurescript, javascript, css, and assembling all of the client
    side files together into a single page webapp.
    If you don't have nodejs installed on your system, you can use mozilla's rhino
    library to run the build script using Java (by changing the useNode property to false).
    It will just be much slower to build this way.

    Other Targets:
  </description>

  <property name="useNode" value="true" />
  <property name="src.public.dir" location="src/public" />
  <property name="deploy.public.dir" location="target/public" />
  <property name="public.problemViewer.dir" location="${src.public.dir}/problemViewer" />
  <property name="src.compass.dir" location="src/compass" />
  <property name="src.cljx.dir" location="src/cljx" />
  <property name="css.dir" value="css" />
  <property name="js.dir" value="js" />
  <property name="src.css.dir" location="${src.public.dir}/${css.dir}" />
  <property name="src.js.dir" location="${src.public.dir}/${js.dir}" />
  <property name="deploy.css.dir" location="${deploy.public.dir}/${css.dir}" />
  <property name="deploy.js.dir" location="${deploy.public.dir}/${js.dir}" />
  <property name="built.jsmain.file" location="target/built-files/js/main.js" />
  <property name="deploy.jsmain.file" location="${deploy.js.dir}/main.js" />

  <fileset id="public-deps" dir="${src.public.dir}">
    <include name="index.html" />
    <include name="problemViewer/**/*" />
  </fileset>

  <fileset id="css-deps" dir="${src.css.dir}">
    <include name="**/*" />
  </fileset>

  <fileset id="js-deps" dir="${src.js.dir}">
    <include name="lib/require/require.js" />
    <include name="workers/cljsWorker.js" />
  </fileset>

  <fileset id="built-files" dir="${src.public.dir}">
    <include name="css/gcj-cljs.css" />
    <include name="js/workers/*" />
    <include name="problemViewer/**/*" />
  </fileset>

  <fileset id="problemViewer-files" dir="${src.cljx.dir}/shared">
    <include name="**/*.in" />
    <include name="**/*.cljx" />
  </fileset>

  <target name="clean" >
    <description>
      clean:
      Delete all of the built files.
    </description>
    <delete includeEmptyDirs="true">
      <fileset dir="target">
        <include name="public/**/*"/>
        <include name="built-files/**/*"/>
        <include name="cljx_generated/**/*"/>
      </fileset>
      <fileset refid="built-files"></fileset>
    </delete>
  </target>

  <target name="build-js-node" if="${useNode}">
    <description>
      build-js-node:
      Uses node to build the javascript application. Much faster than using java
      and rhino.js. Will only run if the useNode property is set to true.
    </description>
    <exec osfamily="windows" failonerror="true" executable="cmd">
      <arg line="/c node r.js -o app.build.js" />
    </exec>

   <exec osfamily="unix" failonerror="true" executable="/bin/sh"> 
    <arg value="-c" /> 
    <arg value="node r.js -o app.build.js" /> 
   </exec> 
  </target>

  <target name="build-js-java" unless="${useNode}">
    <description>
      build-js-java: 
      Uses java and rhino to build the javascript application. Much slower than using node.
      Since this is an Ant script, Java should already be installed on the system.
      Will only run if useNode property isn't set or is set to false.
    </description>
    <exec osfamily="windows" failonerror="true" executable="cmd">
      <arg line="/c java -Xss2m -cp js.jar org.mozilla.javascript.tools.shell.Main r.js -o app.build.js" />
    </exec>

   <exec osfamily="unix" failonerror="true" executable="/bin/sh"> 
    <arg value="-c" /> 
    <arg value="java -Xss2m -cp js.jar org.mozilla.javascript.tools.shell.Main r.js -o app.build.js" /> 
   </exec> 
  </target>

  <target name="build-js" depends="build-js-node, build-js-java">
    <description>
      build-js:
      Will concatenate the javascript application down to a single file, removing
      all of the whitespace and comments.
    </description>
  </target>

  <target name="compile-cljx">
    <description>
      compile-cljx:
      Use lein to compile the cljs and clj files from the cljx files.
    </description>
    <exec osfamily="windows" failonerror="true" executable="cmd">
      <arg line="/c lein cljx once" />
    </exec>

   <exec osfamily="unix" failonerror="true" executable="/bin/sh"> 
    <arg value="-c" /> 
    <arg value="lein cljx once" /> 
   </exec> 
  </target>

  <target name="compile-clojurescript" depends="compile-cljx">
    <description>
      compile-clojurescript:
      Use lein to compile the clojurescript
    </description>
    <exec osfamily="windows" failonerror="true" executable="cmd">
      <arg line="/c lein cljsbuild once" />
    </exec>

   <exec osfamily="unix" failonerror="true" executable="/bin/sh"> 
    <arg value="-c" /> 
    <arg value="lein cljsbuild once" /> 
   </exec> 
  </target>

  <target name="compile-sass">
    <description>
      compile-sass:
      Use compass to compile the css files
    </description>
    <exec osfamily="windows" failonerror="true" executable="cmd" dir="${src.compass.dir}">
      <arg line="/c compass compile" />
    </exec>

   <exec osfamily="unix" failonerror="true" executable="/bin/sh" dir="${src.compass.dir}"> 
    <arg value="-c" /> 
    <arg value="compass compile" /> 
   </exec> 
  </target>

  <target name="build-problemViewer-dir">
    <description>
      build-problemViewer-dir:
      Assemble the source and input files for the problems to be accessable in 
      the public directory.
    </description>
    <copy todir="${public.problemViewer.dir}">
      <fileset refid="problemViewer-files" />
    </copy>
  </target>


  <property name="exported_solution.dir" location="target/exported_solutions/${problemName}" />
  <property name="src.problem.dir" location="${src.cljx.dir}/shared/problems/${problemName}" />

  <target name="clean-solution" if="problemName">
    <mkdir dir="${exported_solution.dir}" />
    <delete includeEmptyDirs="true">
      <fileset dir="${exported_solution.dir}" includes="**/*"/>
    </delete>
  </target>

  <target name="export-solution-files" if="problemName">
    <echo message="The problem name is ${problemName}" />
    <copy todir="${exported_solution.dir}">
      <fileset dir="src/templates/exported_solution" includes="**/*" />
    </copy>
    <copy todir="${exported_solution.dir}/src/cljx">
      <fileset dir="src/cljx/server" includes="**/*"/>
      <fileset dir="src/cljx/shared">
        <include name="gcj_util/**/*" />
        <include name="problems/${problemName}/*.cljx" />
      </fileset>
    </copy>
    <copy todir="${exported_solution.dir}/input">
      <fileset dir="${src.problem.dir}/input" includes="*.in" />
    </copy>
    <replace file="${exported_solution.dir}/src/lein_tasks/leiningen/solve.clj"
      token="{{problemName}}" value="${problemName}" />
  </target>

  <target name="build-exported-cljx" if="problemName">
    <description>
      build-exported-cljx
      Use lein to compile the cljx into clj files in the exported project.
    </description>
    <exec osfamily="windows" failonerror="true" executable="cmd" dir="${exported_solution.dir}">
      <arg line="/c lein cljx once" />
    </exec>

   <exec osfamily="unix" failonerror="true" executable="/bin/sh" dir="${exported_solution.dir}"> 
    <arg value="-c" /> 
    <arg value="lein cljx once" /> 
   </exec> 
  </target>

  <target name="export-solution" if="problemName"
    depends="clean-solution, export-solution-files, build-exported-cljx"
    description="Export the solution as a simple to use clojure project">
  </target>

  <target name="webapp" depends="clean, build-problemViewer-dir,compile-clojurescript, compile-sass, build-js"
    description="Assemble all of the client files into a single page web app that can be
hosted by a static http file server.">
    <copy todir="${deploy.public.dir}">
      <fileset refid="public-deps" />
    </copy>
    <copy todir="${deploy.css.dir}">
      <fileset refid="css-deps" />
    </copy>
    <copy todir="${deploy.js.dir}">
      <fileset refid="js-deps" />
    </copy>
    <copy tofile="${deploy.jsmain.file}" file="${built.jsmain.file}"></copy>
  </target>

</project>

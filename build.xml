<?xml version="1.0"?>
<project name="gcj-viewer" default="webapp">
  <description>
    Build File for minifying/compiling the clojurescript, javascript, css, and assembling all of the client
    side files together into a single page webapp.
    If you don't have nodejs installed on your system, you can use mozilla's rhino
    library to run the build script using Java. It will just be much slower to build this way.
  </description>

  <property name="useNode" value="true" />
  <property name="src.public.dir" location="src/public" />
  <property name="deploy.public.dir" location="target/public" />
  <property name="css.dir" value="css" />
  <property name="js.dir" value="js" />
  <property name="src.css.dir" location="${src.public.dir}/${css.dir}" />
  <property name="src.js.dir" location="${src.public.dir}/${js.dir}" />
  <property name="deploy.css.dir" location="${deploy.public.dir}/${css.dir}" />
  <property name="deploy.js.dir" location="${deploy.public.dir}/${js.dir}" />
  <property name="built.jsmain.file" location="target/built-files/js/main.js" />
  <property name="deploy.jsmain.file" location="${deploy.js.dir}/main.js" />

  <fileset id="public-deps" dir="${src.public.dir}">
    <include name="*.html" />
    <include name="problems/**/*" />
  </fileset>

  <fileset id="css-deps" dir="${src.css.dir}">
    <include name="**/*" />
  </fileset>

  <fileset id="js-deps" dir="${src.js.dir}">
    <include name="lib/require/require.js" />
    <include name="workers/**/*" />
  </fileset>

  <target name="clean" >
    <description>
      Delete all of the built files.
    </description>
    <delete includeEmptyDirs="true">
      <fileset dir="target">
        <include name="public/**/*"/>
        <include name="built-files/**/*"/>
      </fileset>
    </delete>
  </target>

  <target name="build-js-node" if="${useNode}">
    <description>
      Uses node to build the javascript application. Much faster than using java
      and rhino.js. Will only run if the useNode property is set to true.
    </description>
    <exec osfamily="windows" failonerror="true" executable="cmd">
      <arg line="/c node r.js -o app.build.js" />
    </exec>

   <exec osfamily="unix" failonerror="true" executable="/bin/sh"> 
    <arg value="-c" /> 
    <arg value="node r.js -o app.build.js" /> 
   </exec> 
  </target>

  <target name="build-js-java" unless="${useNode}">
    <description>
      Uses java and rhino to build the javascript application. Much slower than using node.
      Since this is an Ant script, Java should already be installed on the system.
      Will only run if useNode property is set to true.
    </description>
    <exec osfamily="windows" failonerror="true" executable="cmd">
      <arg line="/c java -Xss2m -cp js.jar org.mozilla.javascript.tools.shell.Main r.js -o app.build.js" />
    </exec>

   <exec osfamily="unix" failonerror="true" executable="/bin/sh"> 
    <arg value="-c" /> 
    <arg value="java -Xss2m -cp js.jar org.mozilla.javascript.tools.shell.Main r.js -o app.build.js" /> 
   </exec> 
  </target>

  <target name="build-js" depends="build-js-node, build-js-java">
    <description>
      Will concatenate the javascript application down to a single file, removing
      all of the whitespace and comments.
    </description>
  </target>

  <target name="webapp" depends="clean, build-js">
    <description>
      Assemble all of the client files into a single page web app that can be
      hosted by a static http file server.
    </description>
    <copy todir="${deploy.public.dir}">
      <fileset refid="public-deps" />
    </copy>
    <copy todir="${deploy.css.dir}">
      <fileset refid="css-deps" />
    </copy>
    <copy todir="${deploy.js.dir}">
      <fileset refid="js-deps" />
    </copy>
    <copy tofile="${deploy.jsmain.file}" file="${built.jsmain.file}"></copy>
  </target>

</project>
